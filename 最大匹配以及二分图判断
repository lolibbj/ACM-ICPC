/*
二分图匹配（匈牙利算法的DFS实现）(邻接矩阵)
初始化：g[][]两边顶点的划分情况
建立g[i][j]表示i->j的有向边就可以了，是左边向右边的匹配
g没有边相连则初始化为0
N是匹配左边的顶点数，m是匹配右边的顶点数
时间复杂度为 o(V*E)V是二分图的左边顶点，E是二分图的边数
*/
#include<bits/stdc++.h>
using namespace std;
int n,m;
const int maxn=200000;
int vis[maxn];
struct edges
{
    int to;
    int dis;
    int next;
};
edges edge[maxn*10];
int head[maxn*10], num;

void init() //初始化
{
    memset(head, -1, sizeof(head));
    num = 0;
}

void add(int from, int to, int len)
{
    edge[num].to = to;
    edge[num].dis = len;
    edge[num].next = head[from];
    head[from] = num++;
}
int line[maxn*10];//X集合中第i个匹配Y集合中的哪一个
int solve(int x)
{
    for(int i = head[x]; i!=-1; i=edge[i].next)
    {
        int to = edge[i].to;
        if(vis[to] == -1)
        {
            vis[to]=1;
            if(line[to]==-1 || solve(line[to]))
            {
                line[to]=x;
                return 1;
            }
        }
    }
    return 0;
}
int color[maxn];
bool bfs(int s,int e)
{
    queue<int>q;
    q.push(s);
    color[s]=0;
    while(!q.empty())
    {
        int temp=q.front();
        q.pop();
        for(int i=head[temp];i!=-1;i=edge[i].next)
        {
            int to=edge[i].to;
            if(color[to]==-1)
            {
                color[to]=(color[temp]+1)%2;
                q.push(to);
            }
            else
            {
                if(color[to]==color[temp]) return false;
            }
        }
    }
    return true;
}
int main()
{

    while(~scanf("%d %d",&n,&m))
    {
        init();
        for(int i=1;i<=m;i++)
        {
            int u,v;
            scanf("%d %d",&u,&v);
            add(u,v,0);
            add(v,u,0);//判断二分图染色的时候否则就不要这个
        }
        int flag=0;
        memset(color,-1,sizeof(color));
        for(int i=1;i<=n;i++)
        {
            if(color[i]==-1&&!bfs(i,n))
            {
                flag=1;
                break;
            }
        }
        //if(!bfs()) flag=1;
        if(flag) printf("No\n");
        else
        {
            int ans=0;
            memset(line,-1,sizeof(line));
            for(int i=1;i<=n;i++)
            {
                memset(vis,-1,sizeof(vis));
                if(solve(i)) ans++;
            }
            printf("%d\n",ans/2);
        }
    }
    return 0;
}
////建立 g[i][j] 表示 i->j 的有向边就可以了，是左边向右边的匹配
//g 没有边相连则初始化为 0
//uN 是匹配左边的顶点数，vN 是匹配右边的顶点数
//调用：res=hungary(); 输出最大匹配数
//优点：适用于稠密图，DFS 找增广路，实现简洁易于理解
//时间复杂度:O(VE) 调用hungary函数

int g[maxn][maxn];
int link[maxn];
int mpt[maxn][maxn];
int vis[maxn];
int n,m;
int dfs(int u)
{
    for(int v=1;v<=vn;v++)
    {
        if(g[u][v]&&!vis[v])
        {
            vis[v]=1;
            if(link[v]==-1||dfs(link[v]))
            {
                link[v]=u;
                return 1;
            }
        }
    }
    return 0;
}
int hungary()
{
    int res=0;
    memset(link,-1,sizeof(link));
    for(int u=1;u<=un;u++)
    {
        memset(vis,0,sizeof(vis));
        if(dfs(u)) res++;
    }
    return res;
}
