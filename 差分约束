题意:班里共有n个人，现在要分糖吃，需要满足这样的条件：B同学得到糖的数量不能比A同学多K个
求flymouse（第n个）最多比snoopy（第1个）多几个糖。
由题意可得B-A<=K，建立A到B的边，权值为K，求出最短路即可。
（建边的时候是A到B 需要注意）
所有表达式都应该化成 a-b<=c的形式 从而建立一条b到a的一条边
首先根据题目的要求进行不等式组的标准化。
(1)、如果要求取最小值，那么求出最长路，那么将不等式全部化成xi – xj >= k的形式，
这样建立j->i的边，权值为k的边，如果不等式组中有xi – xj > k，
因为一般题目都是对整形变量的约束，化为xi – xj >= k+1即可，如果xi – xj = k呢，
那么可以变为如下两个：xi – xj >= k, xi – xj <= k,进一步变为xj – xi >= -k，
建立两条边即可。
(2)、如果求取的是最大值，那么求取最短路，将不等式全部化成xi – xj <= k的形式,
这样建立j->i的边，权值为k的边，如果像上面的两种情况，那么同样地标准化就行了。
(3)、如果要判断差分约束系统是否存在解，一般都是判断环，选择求最短路或者最长路求解都行，
只是不等式标准化时候不同，判环地话，用spfa即可，
n个点中如果同一个点入队超过n次，那么即存在环。
值得注意的一点是：建立的图可能不联通，我们只需要加入一个超级源点，
比如说求取最长路时图不联通的话，我们只需要加入一个点S，
对其他的每个点建立一条权值为0的边图就联通了，然后从S点开始进行spfa判环。最短路类似。
3、 建好图之后直接spfa或bellman-ford求解，不能用dijstra算法，
因为一般存在负边，注意初始化的问题。

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <set>
#include <queue>
using namespace std;
#define INF 1000000007
#define maxn 50005
struct Edge
{
    int v;
    int w;
    int next;
} edge[maxn * 3];
int head[maxn],d[maxn],vis[maxn],n = 0,N;
void Add(int u,int v,int w)
{
    edge[n].v = v;
    edge[n].w = w;
    edge[n].next = head[u];
    head[u] = n ++;
}
void spfa()
{
    for(int i = 1; i <= N; i++)
        d[i] = INF;
    int q[maxn],top = 0;
    q[++top] = 1;
    d[1] = 0;
    while(top)
    {
        int v = q[top--];
        vis[v] = 0;
        for(int i = head[v]; i != -1; i = edge[i].next)
            if(d[edge[i].v] > d[v] + edge[i].w)   // 最短路径
            {
                d[edge[i].v] = d[v] + edge[i].w;
                if(!vis[edge[i].v])
                {
                    vis[edge[i].v] = 1;
                    q[++top] = edge[i].v;
                }
            }
    }
}
int main()
{
    int t,u,v,w;
    memset(head,-1,sizeof(head));
    memset(vis,0,sizeof(vis));
    scanf("%d%d",&N,&t);
    while(t --)
    {
        scanf("%d%d%d",&u,&v,&w);
        Add(u,v,w);
    }
    spfa();
    printf("%d\n",d[N]);
    return 0;
}
