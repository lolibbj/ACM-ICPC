
二进制为n个1 ，十进制表示为（1<< n）-1
如果要获得 n 的第 i 位的数据（0还是1），判断（n&（1<<i））,若真，为1，假，为0；
 //这里的第 i 位为从右往左从0开始数的
如果要设置 n 的第 i 位为1，n=（n |（1<<i））；                                                                             
如果要设置 n 的第 i 位为0，n=（n &（~（1<<i））；
如果要取出 n 的最后一个1 （lowbit）:（n &（-n））
(这里利用的是负数取反加1实际上改变的是二进制最低位的1这个性质)

现有n盏灯，以及m个按钮。每个按钮可以同时控制这n盏灯——
按下了第i个按钮，对于所有的灯都有一个效果。按下i按钮对于第j盏灯，
是下面3中效果之一：如果a[i][j]为1，那么当这盏灯开了的时候，把它关上，否则不管；
如果为-1的话，如果这盏灯是关的，那么把它打开，否则也不管；
如果是0，无论这灯是否开，都不管。
现在这些灯都是开的，给出所有开关对所有灯的控制效果，求问最少要按几下按钮才能全部关掉。

#include<bits/stdc++.h>
using namespace std;
const int maxn=100+10;
int a[maxn][maxn];
int vis[1000010];
struct node
{
    int step,stats;
};
int n,m;
int bfs()
{
    queue<node>q;
    int s=(1<<n)-1;
    vis[s]=1;
    q.push((node){0,s});
    while(!q.empty())
    {
        node now=q.front();
        q.pop();
        if(now.stats==0) return now.step;
        int ss;
        for(int i=1;i<=m;i++)
        {
             ss=now.stats;
             for(int j=1;j<=n;j++)
             {
                 if(a[i][j]==1&&(ss&(1<<j-1))) ss&=(~(1<<j-1));
                 else if(a[i][j]==-1&&!(ss&(1<<j-1))) ss|=(1<<j-1);
             }
           /* for(int j=1;j<=n;j++)//由于开关对所有灯都影响，所以每个灯都遍历
            {
                if( a[i][j]==1 && (ss&(1<<j-1)) ) ss^=(1<<j-1);
                else if( a[i][j]==-1 && !(ss&(1<<j-1)) ) ss|=(1<<j-1);
            }
            */if(!vis[ss])
            {
                vis[ss]=1;
                q.push((node){now.step+1,ss});
            }
        }
    }
    return -1;
}
int main()
{
    scanf("%d %d",&n,&m);
    for(int i=1;i<=m;i++)
        for(int j=1;j<=n;j++)
            scanf("%d",&a[i][j]);
    int ans=bfs();
    printf("%d\n",ans);
    return 0;
}
