/*给出一个n行m列的图，*代表海域，o代表冰水，#代表冰山，要想在海域中放置船，
保证船与船之间不能相互看到，之间只要有山就不能看到，问最多能放多少船。*/
#include <cstdio>
#include <cstring>
#include <algorithm>
#define maxn 55
using namespace std;

int map[maxn * 55][maxn * 55];
char str[maxn][maxn];
int used[maxn * 55];
int link[maxn * 55];
int x[maxn][maxn];
int y[maxn][maxn];
int n ;
int x1, y1;

void init(){
    memset(map, 0, sizeof(map));
    memset(x, 0, sizeof(x));
    memset(y, 0, sizeof(y));
}

void input(){
    for(int i = 0; i < n; ++i)
        scanf("%s", str[i]);
}
void creat_x(){
    x1 = 1;
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < n; ++j){
            if(str[i][j] == '.')
                x[i][j] = x1;
            if(str[i][j] == 'X')
                x1++;
        }
        x1++;
    }
    return ;
}

void creat_y(){
    y1 = 1;
    for(int j = 0; j < n; ++j){
        for(int i = 0; i < n; ++i){
            if(str[i][j] == '.')
                y[i][j] = y1;
            if(str[i][j] == 'X')
                y1++;
        }
        y1++;
    }
    return ;
}

void getmap(){
    for(int i = 0; i < n; ++i){
        for(int j = 0; j <n ; ++j)
            if(str[i][j] == '.')
            map[x[i][j]][y[i][j]] = 1;
    }
    return ;
}

bool dfs(int x){
    for(int i = 1; i < y1; ++i){
        if(map[x][i] && !used[i]){
            used[i] = 1;
            if(link[i] == -1 || dfs(link[i])){
                link[i] = x;
                return true;
            }
        }
    }
    return false;
}

int hungary(){
    int ans = 0;
    memset(link, -1, sizeof(link));
    for(int j = 1; j < x1; ++j){
        memset(used, 0, sizeof(used));
        if(dfs(j))
            ans++;
    }
    return ans;
}
int main (){
    while(~scanf("%d", &n)&&n){
        init();
        input();
        creat_x();
        creat_y();
        getmap();
        int sum = hungary();
        printf("%d\n", sum);
    }
    return 0;
}
