#include <stdio.h>
#include <queue>
#include <vector>
#include <string.h>
#include <algorithm>
using namespace std;

#define INF 0x3f3f3f3f
const int maxn = 105;
int n, m;

struct Edge{
    int u, v, w;
    Edge(int u, int v, int w):u(u),v(v),w(w) {}
};

struct node {
    int d, u;
    node(int d, int u):d(d),u(u) {}
    friend bool operator < (node a, node b) {
        return a.d > b.d;
    }
};

vector<Edge> edges;
vector<int> G[maxn];
int dist[maxn]; // 存放起点到i点的最短距离
int vis[maxn]; // 标记是否访问过
int p[maxn]; // 存放路径

void spfa(int s) {
    queue<node> q;
    for (int i = 0; i <= n; i++) dist[i] = INF;
    dist[s] = 0;
    memset(vis, 0, sizeof(vis));
    q.push(node(0, s));
    while (!q.empty()) {
        node now = q.front(); q.pop();
        int u = now.u;
        vis[u] = 0;
        for (int i = 0; i < G[u].size(); i++) {
            Edge& e = edges[G[u][i]];
            if (dist[e.v] > dist[u] + e.w) {
                dist[e.v] = dist[u] + e.w;
                p[e.v] = u;
                if (!vis[e.v]) {
                    vis[e.v] = 1;
                    q.push(node(dist[e.v], e.v));
                }
            }
        }
    }
}

void addedge(int u, int v, int w) {
    edges.push_back(Edge(u, v, w));
    int sz = edges.size();
    G[u].push_back(sz - 1);
}

void init() {
    for(int i = 0; i <= n; i++) G[i].clear();
    edges.clear();
}

int main() {
    while (scanf("%d%d", &n, &m) != EOF) {
        if (n + m == 0) break;
        init();
        for (int i = 0; i < m; i++) {
            int a, b, c;
            scanf("%d%d%d", &a, &b, &c);
            addedge(a, b, c);
            addedge(b, a, c);
        }
        spfa(1);
        printf("%d\n",dist[n]);
    }
    return 0;
}
/*spfa矩阵实现
#include <stdio.h>
#include <queue>
#include <string.h>
#include <algorithm>
using namespace std;

#define INF 0x3f3f3f3f
const int maxn = 105;
int mpt[maxn][maxn];
int n, m;
int dist[maxn];
int vis[maxn];

void spfa() {
    queue<int> q;
    q.push(1);
    memset(vis, 0, sizeof(vis));
    dist[1] = 0;
    while (!q.empty()) {
        int now = q.front();
        q.pop();
        vis[now] = 0;
        for (int i = 1; i <= n; i++) {
            if (dist[i] > dist[now] + mpt[now][i]) {
                dist[i] = dist[now] + mpt[now][i];
                if (vis[i] == 0) {
                    q.push(i);
                    vis[i] = 1;
                }
            }
        }
    }
}

int main() {
    while (scanf("%d%d", &n, &m) != EOF) {
        if (n + m == 0) break;
        for (int i = 1; i <= n; i++) {
            dist[i] = INF;
            for (int j = 1; j <= n; j++) {
                if (i == j) mpt[i][j] = 0;
                else mpt[i][j] = INF;
            }
        }
        for (int i = 1; i <= m; i++) {
            int a, b, c;
            scanf("%d%d%d", &a, &b, &c);
            if (c < mpt[a][b]) {
                mpt[a][b] = c;
                mpt[b][a] = c;
            }
        }
        spfa();
        printf("%d\n",dist[n]);
    }
    return 0;
}
*/
/*spfa用栈和领接表如果边很大超时可以玄学试一波
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <set>
#include <queue>

using namespace std;
#define INF 1000000007
#define maxn 50005

struct Edge
{
    int v;
    int w;
    int next;
} edge[maxn * 3];

int head[maxn],d[maxn],vis[maxn],n = 0,N;
void Add(int u,int v,int w)
{
    edge[n].v = v;
    edge[n].w = w;
    edge[n].next = head[u];
    head[u] = n ++;
}

void spfa()
{
    for(int i = 1; i <= N; i++)
        d[i] = INF;
    int q[maxn],top = 0;
    q[++top] = 1;
    d[1] = 0;
    while(top)
    {
        int v = q[top--];
        vis[v] = 0;
        for(int i = head[v]; i != -1; i = edge[i].next)
            if(d[edge[i].v] > d[v] + edge[i].w)   // 最短路径
            {
                d[edge[i].v] = d[v] + edge[i].w;
                if(!vis[edge[i].v])
                {
                    vis[edge[i].v] = 1;
                    q[++top] = edge[i].v;
                }
            }
    }
}
int main()
{
    int t,u,v,w;
    memset(head,-1,sizeof(head));
    memset(vis,0,sizeof(vis));
    scanf("%d%d",&N,&t);
    while(t --)
    {
        scanf("%d%d%d",&u,&v,&w);
        Add(u,v,w);
    }
    spfa();
    printf("%d\n",d[N]);
    return 0;
}
